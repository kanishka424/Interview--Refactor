8.First class functions passing functions as arguments

A function is an instance of the Object type.

A fnction behaves like any other object

We can store functions in a varibale

we can pass a function as an argument to another function

we can return a function from a function


BECAUSE OF ABOVE WE SAY IN JS FUNCTIONS ARE FIRST CLASS


***code example******

var years=[1990,1965,1937,2005,1998]

function arrayCalc(arr,fn){
var arrRes=[];
for(vr i=0;i<arr.length;i++){
arrRes.push(fn(arr[i]));//WE USE A FUNCTION PASSED
}
return arrRes;

}

function calculateAge(el){
return 2016-el;
}

function isFullAge(el){
return el>=18;
}

var ages=arrayCalc(years,calculateAge);
var fullAges=arrayCalc(years,isFullAge);
***code example******


var ages=arrayCalc(years,calculateAge);
console.log(ages);






$$$$$$$$$$$$$$$$$$$$$9. First Class Functions Functions Returning Functions*$$$$$$$$$$$$$$$$$$


****************code*********************************

function interviewQuetion(job){
if(job==='designer'){
return function(name){
console.log("hi"+name);

}

}else if(job==='teacher'){
return function(name){
console.log("hi"+name);

}

}else{

return function(name){
console.log("hi"+name);

}
}

}


var teacherQuestion=interviewQuestion('teacher');
teacherQuestion('John');

interviewQuestion('teacher')('peter')//Second way of calling 


$$$$$$$$$$$$$$$$$$$$$$$$$$10. Immediately Invoked Function Expressions (IIFE)$$$$$$$$$$$$$$$$$$$



USUALLY TO MAKE DATA PRIVATE

*****CODE**
(function (){
var score=Math.random()*10;
console.log(score>=5);
})();

)

CONSOLE.LOG(score)//WONT WORK BECAUSE OF DATA PRIVACY

**NOTCE THE OUTER PARNTHESES

*****CODE**

(function (goodluck){
var score=Math.random()*10;
console.log(score>=5);
})(5);//PASSING ARGUMENTS TO IIFE

)

iife not reusable

$$$$$$$$$$$$$$$$$$$$$11.Closure$$$$$$$$$$$$$$$$$$$$$$$$$$$

12.Bind,Call and Apply


thes methods allow us to call function and set to "this" varible manually




call() when we want to call a method on an object which it doesnt have but another one has
e.g-when "john" object has "presentation()" and "emily" doesnt and "emily" wants to call "pressentation()"
(question-same thing with method borrowing?john.presentation==emily.presentation)


john.presntation('formal','morning');
john.presentation.call(emily,'friendly','aftternoon');//in above the first argument is 'this' here it is 'emily' object
this is also method borrowing




apply()

The only difference here is it accepts the arguments as an array;
john.presentation.apply(emily,['friendly','afternoon'])







bind()

VERY SIMILAR TO call() 

also allow us to set 'this' explicitly


//however the difference is the bind() doesnt immediatly call the function INSTEAD IT GENERATES A COPY OF THE FUNCTION
//SO WE CAN STORE IT SOMEWHERE
//THIS IS EXTREMLY USEFUL TO CREATE FUNCTIONS WITH PRESET ARGUMENTS


LETS DO IT

var johnFriendly=john.presentation.bind(john,'friendly')



//this returns a function and the function will be stored in 'johnFriendly'


johnFriendly('morning')//how to call function we only have to pass the third argument others (1st and 2nd)are PRESET


CURRING-time 10.50


//another exmple



var emilyFormal=john.presentation.bind(emily,'formal');
emilyFormal('afternoon');




