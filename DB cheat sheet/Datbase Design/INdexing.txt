################Indexes(clustered,Non-clustered,Composite Index)#################

the index back of a book is a good example

e.g-If you look for key word "Queries"
    it says where it is


    It s basically a list where certain data points 
    are

anotheR kind of index is a PHONE BOOK 
YOU SEARCH FOR "G" GRAHM AND YOU FIND PHONE NUMBER
THATS ANOTHER KIND OF INDEX




It is data is sorted and data is right there for you to FIND
                VS
Index in the back list of data pointing to where it is at



we will first discuss NON-CLUSTERED INDEX
MEANS DATA IS NOT ACTUALLY WHERE THE INDEX IS,INDEX  IS BASICALLY A SEPERATE THING 
WHICH BASICALLY SORT THE DATA AND KEEPS A POINT THAT TELLS YOU HOW TO GET TO THE DATA
E.G-SO YOU FIND THE "TOPIC" KEYWORD IN INDEX AND IT TELLS YOU WHERE TO GO AND THAT IS A NON CLUSTERED INDEX


A CLUSTERED INDEX IS LIKE A PHONE BOOK WHICH ACTUALLY REORGANIZE ACTULAA DATA
IN A WAY THAT IS EASY TO USE


NON-CLUSTER-POINTS TO DATA
CLUSTERED -ORAGNIZES THE ACTUAL  DATA



****WE CAN ACTUALLY HAVE MULTIPLE NON-CLUSTERED INDEXES THAT BECAUSE NON-CLUSTERED IS BASICALLY A LIST OF DATA THAT POINTS
TO ACTUAL DATA THAT WE COULD ORAGANIZE IN DIFFERENT WAYS

****BUT CLUSTERED INDEX WE ONLY CAN HAV ONE OF THOSE THAT BECAUSE IT ORAGANIZE DATA THAT WAY
THINK OF A PHONE BOOK THAT ACTULLY ORAGNIZES DATA A TO Z
OR WE CAN PUT THE PHONE NUMBERS FROM SMALLEST TO LARGEST 0000000000000 TO 999999999999(NOT PRACTICAL BUT TO UNDERSTANSD)


SO AS YOU CAN SEE WE CANT ORAGNIZE A PHONE BOOK FROM NAMES AND ASCENDING PHONE NUMBER
IT WONT BE USEFUL SO,WOULD BE CONFLICTING,  CLUSTERED INDEX WE ONLY CAN HAV ONE 

TIME-5.15 ACCORDING TO DATABASES

IN DATABSE WE WILL USE CERTAIN COLUNS FOR CERTAIN THINGS
IF THATH COLUMN  IS USED  FREQUENTLY WE CAN NEDD IT TO BE SUPER FAST
SO WE WANT THE DATABSE TO KNOW HOW TO USE IT THE BEST WAY SO WE CREATE AN INDEX
THE DATABSE UNDERSTNAD THE INDEX SO WHEN YOU TELL IT TO DO SOMETHING it CAN DO IT FASTER
RATHER THAN HAVING TO GO THROUH ALL THE DATA WHICH IS CALL A "TABLE SCAN" WHEN WORKING 
WITH MILLIONS OF ROWS THAT COULD TAKE FOREVER!!!!
IF YOU HAVE INDEX IT WILL USE INDEX SEEK WHICH BASICALLY KNOWS WHERE TO START SEARCHING FOR THAT DATA
IT MAKES OUR QUERIES TONS FASTER AND USES LESS RESOURCES


DOWNSIDE TO INDEX

WHEN UPDATING AN INDEX TABLE YOU NOT ONLY UPDATES TABLE BUT THE INDEX AS WELL

E.G-WHEN YOU PUT SOMETHING NEW TO A BOOK THE INDEX  UST ALSO UPDATE OTHERWISE INDEX WILL BE 
    USELESS
    SO WHEN YOU UPDATE IT MIGHT TAKE LONGER


IME-6.07

THE PRIMARY KEY IS THE ONE USUALLY GOING TO HAVE A CLUSTERED INDEX
THATS THE WAY ACTUALLY SORTS THE DATA

E.G-IN A TWO BILLION RECORD DATASET FINDING ID WITH ID NUMBER 72
FIRST CHECK ID NUMBER ONE NO ITS NOT 
SECOND CHECK ID NUMBER TWO ITS NOT
    .
    .
    .
    .
    .


SEVENTY TWO ID NUMBER SEVENTY TWO CHECKED YES THERE IT IS


BUT IF IT WAS INDEXED(cluste INDEX) DB KNOWS THAT THE 72 ID IS BETWEEN 
70 AND 80 AND WILL ONLY SEARCH TAHT PART OF DATABSE
SO CLUSTERED INDEXES ARE FASTER AND BETTER BUT ITS GOING TO BE ONLY ONE
THE CLUSTERED INDEX IS USUALLY THE PRIMARY KEY BUT THAT IS NOT NECESSARY
DEPENDING ON YOUR DB AND YOUR GOAL FOR DB



THE NON-CLUSTERED INDEX(INDEXES BACK OF A BOOK) ID STILL GOOD IF YOU DO SOMETHING 
LIKE "WHERE FIRSTnAME="jOHN"
NOW IT HAS  A LIST OF JOHNS AND WHERE THEY ARE LOCATED  ON THE TABLE


ANOTHEER REASON FOR INDEXES TO INCREASE THE SPEED OF JOINS
JOIN COMBINES TABLES BY FOREIGN KEY AND PPRIMARY KEY CONNECTION










PRACTICAL INDEXING-https://www.youtube.com/watch?v=fsG1XaZEa78









